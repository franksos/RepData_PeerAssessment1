plot(x, y, pch = 19, col = c(0, .5, .5))
plot(x, y, pch = 19, col = rgb(0, .5, .5))
plot(x, y, pch = 19, col = rgb(0, .5, .5, .3))
newobj <- brewer.pal("BuGn", 3)
cols <- brewer.pal("BuGn", 3)
cols <- brewer.pal(BuGn, 3)
cols <- brewer.pal(BuGn, "3")
cols <- brewer.pal(3, BuGn)
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPlatte (cols)
pal <- colorRampPalette (cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
swirl()
libary(swirl)
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y = hwy, data = mpg, color = drv)
yhigh
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facet = . ~ drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = . ~ drv, binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
ggplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . ~ drv)
head(mpg)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . ~ drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g
g+geom_print()
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g
+geom_point()
+geom_smooth(method = "lm")
+facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(. ~ drv)+ggtitle("Swirl Rules!")
g+geom_point(color = pink, size)
g+geom_point(color = "pink", size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))+labs(title = "Swirl Rules!")+labs(x = "Displacement", y="Hey Mileage")
g+geom_point(aes(color = drv))+labs(title = "Swirl Rules!")+labs(x = "Displacement", y="Hey Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y="Hwy Mileage")
g+geom_point(size = 2, alpha = 1/2, aes(color = drv))+geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point (aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g+geom_point()
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid (drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid (drv ~ cyl, margins = TRUE) + geom_smooth (method = "lm", se = FALSE, size = 2, color = "BLACK")
g + geom_point() + facet_grid (drv ~ cyl, margins = TRUE) + geom_smooth (method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid (drv ~ cyl, margins = TRUE) + geom_smooth (method = "lm", se = FALSE, size = 2, color = "black") + labs (x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth = "lm")
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm")
)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut) +geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) +geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3
)
cutpoints <- qunatile(diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3, facet_grid(cut ~ car2))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
g <- ggplot(diamonds, aes(carat, price))
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
q
quit
exit
q
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?par()
airquality
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
?trellis.par.set()
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
# Getting and Cleaning Data Course Asssignment
# by Haifeng Yu
library(reshape2)
## download and unzip the files
filename <- "course3project.zip"
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip "
download.file(fileURL, filename, method="curl")
}
if (!file.exists("UCI HAR Dataset")) {
unzip(filename)
}
# load train and test datasets
train_data <- read.table("UCI HAR Dataset/train/X_train.txt")
train_activities <- read.table("UCI HAR Dataset/train/Y_train.txt")
train_subjects <- read.table("UCI HAR Dataset/train/subject_train.txt")
train <- cbind(train_subjects, train_activities, train_data)
test_data <- read.table("UCI HAR Dataset/test/X_test.txt")
test_activities <- read.table("UCI HAR Dataset/test/Y_test.txt")
test_subjects <- read.table("UCI HAR Dataset/test/subject_test.txt")
test <- cbind(test_subjects, test_activities, test_data)
# merge these two datasets to "onedataset"
onedataset <- rbind(train, test)
# read features from extracted txt files
# and change format from factor to character
features_dataframe <- read.table("UCI HAR Dataset/features.txt")
features <- as.character(features_dataframe[,2])
# add descriptive labels to the data set
colnames(onedataset) <- c("subject", "activity", features)
# extract subject, activity and columns of mean and standard deviation
extract_index <- c(1, 2, grep(".*mean.*|.*std.*", colnames(onedataset)))
wanted_data <- onedataset[, extract_index]
# use descriptive activity names to name activities in the dataset
activity_labels <- read.table("UCI HAR Dataset/activity_labels.txt")
wanted_data$activity <- factor(wanted_data$activity, levels = activity_labels[,1], labels = activity_labels[,2])
wanted_data$subject <- as.factor(wanted_data$subject)
# create a second independant tidy data with the average of each variable for each activity and subject
tidy_melted <- melt(wanted_data, id = c("subject", "activity"))
tidyset <- dcast(tidy_melted, subject + activity ~ variable, mean)
# export the tidy data set to tidyset.txt
write.table (tidyset, "tidyset.txt", row.names = FALSE)
names(tidyset)
library(swirl)
swirl()
swirl()
swirl()
q()
library(swirl)
swirl()
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
5
12
abline(h = 0.05, col = "green")
dist(dFsm)
hf
hc
heatmap(dataMatrix, cm.colors(25))
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red","orange","purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
apply(distTmp, 1, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centres = 3)
kmeans(dataFrame, 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
point(kmObj$centres, col = c("black","red","green"), pch = 3, cex = 3, lwd = 3)
points(kmObj$centres, col = c("black","red","green"), pch = 3, cex = 3, lwd = 3)
points(kmObj$centres, col = c("black","red","green"), pch = 3, cex = 3, lwd = 3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col = kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col = kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col = kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R, local = TRUE")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
d
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1])*(svd1$d[1])%*%t(svd1$t[,1])
a1 <- (svd1$u[,1])*(svd1$d[1])%*%t(svd1$v[,1])
a1 <- (svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2]%*%svd1$d[1:2])%*%t(svd1$v[,1:2])
a2 <- svd1$u[,1:2]%*%svd1$d[1:2]%*%t(svd1$v[,1:2])
a2 <- svd1$u[,1:2]%*%diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImage(a2)
a5 <- svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5])
myImage(svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
myImage(svd1$u[,1:10]%*%diag(svd1$d[1:10])%*%t(svd1$v[,1:10]))
dim(ssd)
names(ssl[,562:563])
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssl$activity)
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim (sub1)
names(sub1,12)
names(sub1)
names(sub1[1:12])
myedit(showXY.R)
myedit("showXY.R")
showMe()
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclust(mdist)
hClustering <- hclust(mdist)
hclustering <- hclust(mdist)
mplclust(hclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[, c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-562:563], 6)
kClust <- kmeans(sub1[,-(562:563)], 6)
kClust <- kmeans(sub1[,-c(562:563)], 6)
table(KClust$cluster, sub1$sctivity)
table(KClust$cluster, sub1$activity)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562:563)], 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(x$y)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centres[laying, 1:12], pch = 19, ylab = "Laying Clyster")
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Clyster")
plot(kClust$centers[laying, 1:12],pch=19,ylab="Laying Cluster")
names(sub1[1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
q()
setwd(Document/coursera/C5/A1)
setwd("Document/coursera/C5/A1")
setwd("Documents/coursera/C5/A1")
dir()
.RData
setwd("RepData_PeerAssessment1")
dir()
activity
activity <- read.csv("activity.csv")
is.na(activity$steps)
sum(is.na(activity$steps))
mean(is.na(activity$steps))
sum(is.na(activity$date)
)
sum(is.na(activity$interval)
)
daystep <- with(activity, tapply(steps, date, sum, na.rm = TRUE))
intstep <- with(activity, tapply(steps, as.factor(interval), mean, na.rm = TRUE))
intstep
str(activity)
for()
?for
)
length(activity)
length(activity$steps)
for (i in 1:length(activity$steps)) {}
for (i in 1:length(activity$steps)) {
}
activity_imput <- activity
for(i in 1:length(activity$steps)) {
if (is.na(activity$steps[i])) {
activity_imput$steps[i] <- intstep[as.factor(activity_imput$interval[i])]
}
}
activity_imput
activity$interval[312]
as.factor("155")
intstep("155")
intstep
intstep(155)
intstep["155"]
activity
v
if (is.na(activity$steps[i]))
()
}
is.na(activity$steps[i])
is.na(activity$steps[1])
activity <- read.csv("activity.csv")
str(activity)
daystepsum <- with(activity, tapply(steps, date, sum, na.rm = TRUE))
hist(daystepsum)
mean(daystepsum)
median(daystepsum)
intstepmean <- with(activity, tapply(steps, as.factor(interval), mean, na.rm = TRUE))
barplot(intstepmean)
intstep[which.max(intstepmean)]
activity_imput <- activity
activity_imput$steps[1]
activity$interval[1]
class(activity$interval[1])
as.factor(activity$interval[1])
as.character(activity$interval[1])
intstepmean["0"]
intstepmean[0]
intstepmean[as.factor(0)]
intstepmean[as.factor(activity_imput$interval[1])]
intstepmean[as.factor(activity_imput$interval[2])]
activity_imput$interval
activity_imput$interval[2]
as.factor(activity_imput$interval[2])
intstepmean[as.factor(activity_imput$interval[2])]
intstepmean["5"]
intstepmean[as.factor(activity_imput$interval[2])]
x <- as.factor(activity_imput$interval[2])
x
intstepmean[as.character(activity_imput$interval[2])]
intstepmean[as.character(activity_imput$interval[3])]
intstepmean[as.character(activity_imput$interval[14])]
for(i in 1:length(activity_imput$steps)) {
if (is.na(activity_imput$steps[i])) {
activity_imput$steps[i] <- intstepmean[as.character(activity_imput$interval[i])]
} }
View(activity_imput)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r}
activity <- read.csv("activity.csv")
str(activity)
```
## What is mean total number of steps taken per day?
```{r}
daystepsum <- with(activity, tapply(steps, date, sum, na.rm = TRUE))
hist(daystepsum)
mean(daystepsum)
median(daystepsum)
```
## What is the average daily activity pattern?
```{r}
intstepmean <- with(activity, tapply(steps, as.factor(interval), mean, na.rm = TRUE))
barplot(intstepmean)
intstepmean[which.max(intstepmean)]
```
## Imputing missing values
```{r}
sum(is.na(activity$steps))
activity_imput <- activity
for(i in 1:length(activity_imput$steps)) {
if (is.na(activity_imput$steps[i])) {
activity_imput$steps[i] <- intstepmean[as.character(activity_imput$interval[i])]
}
}
```
## Are there differences in activity patterns between weekdays and weekends?
```{r}
daystepsum_imput <- with(activity_imput, tapply(steps, date, sum))
hist(daystepsum_imput)
mean(daystepsum_imput)
median(daystepsum_imput)
sum(is.na(activity_imput$steps))
weekday(activity_imput$date)
weekdays(activity_imput$date)
weekdays(as.POSIXct(activity_imput$date))
class(weekdays(as.POSIXct(activity_imput$date)))
wkday <- weekdays(as.POSIXct(activity_imput$date))
workday <- if (wkday == "Saturday" | wdday == "Sunday") {
"weekend"
else
workday <- if (wkday == "Saturday" | wdday == "Sunday") { "weekend" } else {"weekday"}
workday <- if (wkday == "Saturday" | wkday == "Sunday") { "weekend" } else {"weekday"}
wknd <- c("Saturday", "Sunday")
activity_imput$day = as.factor(ifelse(is.element(weekdays(as.POSIXct(activity_imput$date)),wknd), "Weekend", "Weekday"))
head(activity_imput)
?aggregate
View(activity)
sum(is.na(activity$steps))
library(lattice)
)
library(lattice)
library(dplyr)
group_by(activity_imput, day)
byday <- group_by(activity_imput, day)
summarize(byday, mean(steps))
summarize(activity_imput, mean(steps))
x <- aggregate(activity_imput, by = list(interval, day), mean )
x <- aggregate(activity_imput, by = list(interval), mean )
x <- aggregate(activity_imput, by = day, mean )
x <- aggregate(activity_imput, by = activity_imput$day, mean )
x <- aggregate(activity_imput, by = list(activity_imput$day), mean )
x
x <- aggregate(activity_imput$steps, by = list(activity_imput$day, activity_imput$interval), mean )
x
class(x$x)
x$x
as.numeric(x$x)
x <- aggregate(activity_imput$steps, by = list(activity_imput$interval, activity_imput$day), mean )
x
names(x)
names(x) <- c("interval", "day", "avgsteps")
x
head(x)
xyplot(avgsteps ~ interval | day, data = x, type = "l", layout = c(1,2), xlab = "Interval", ylab = "Number of steps")
barplot(intstepmean)
str(intstepmean)
plot(intstepsmean)
plot(intstepmean)
plot(intstepmean, type = "l")
if(!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
unzip(temp)
unlink(temp)
}
dir()
which.max(intstepmean)
intstep
names(intstepmean)
plot(intstepmean, type = "l", xlab = names(intstepmean))
plot(as.integer(names(intstepmean),intstepmean, type = "l")
)
intplot <- cbind(as.integer(names(intstepmean)), intstepmean)
intplot
names(intplot)
names(intplot) <- c("interval", "avgstep")
plot(intplot$interval, intplot$avgstep, type = "l")
with (intplot, plot(interval, avgstep, tyoe = "l"))
?plot
with (intplot, plot(interval, avgstep, type = "l"))
names(intplot)
dim(intplot)
intplot
intplot
str(intplot)
intplot[1,]
intplot[,1]
plot(intplot[,1], intplot[,2], type ="l")
plot(intplot[,1], intplot[,2], type = "l", xlab = "interval", ylab = "average steps")
datstepsum_imput
daystepsum_imput
mean(daystepsum_imput)
median(daystepsum_imput)
hist(daystepsum_imput)
activity_imput$steps
activity$steps
View(activity_imput)
View(activity_imput)
View(activity)
